{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geeml","text":"<p>A python package to extract gee data for machine learning.</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://Geethen.github.io/geeml</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Geethen/geeml/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>geeml could always use more documentation, whether as part of the official geeml docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Geethen/geeml/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geeml for local development.</p> <ol> <li> <p>Fork the geeml repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geeml.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geeml\n$ cd geeml/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geeml tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/Geethen/geeml/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"geeml/","title":"geeml module","text":"<p>Main module.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install geeml, run this command in your terminal:</p> <pre><code>pip install geeml\n</code></pre> <p>This is the preferred method to install geeml, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for geeml can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/Geethen/geeml\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use geeml in a project:</p> <pre><code>import geeml\n</code></pre>"},{"location":"notebooks/1%20Extract_image_data_at_an_AOI/","title":"1 Extract image data at an AOI","text":"In\u00a0[1]: Copied! <pre># import earth engine and intialise high volume end-point\nimport ee\n# ee.Authenticate() # you may need to authenticate\nee.Initialize(opt_url='https://earthengine-highvolume.googleapis.com')\n</pre> # import earth engine and intialise high volume end-point import ee # ee.Authenticate() # you may need to authenticate ee.Initialize(opt_url='https://earthengine-highvolume.googleapis.com') In\u00a0[3]: Copied! <pre>import os\nimport sys\nimport glob\n\nimport csv\nimport geedim\nimport geemap\n\nfrom geeml.utils import eeprint, getCountry\nfrom geeml.extract import extractor\n</pre> import os import sys import glob  import csv import geedim import geemap  from geeml.utils import eeprint, getCountry from geeml.extract import extractor In\u00a0[4]: Copied! <pre>%load_ext watermark\n%watermark\n%watermark --iversions\n</pre> %load_ext watermark %watermark %watermark --iversions <pre>Last updated: 2022-06-29T15:56:50.037466+02:00\n\nPython implementation: CPython\nPython version       : 3.9.12\nIPython version      : 8.4.0\n\nCompiler    : MSC v.1929 64 bit (AMD64)\nOS          : Windows\nRelease     : 10\nMachine     : AMD64\nProcessor   : Intel64 Family 6 Model 158 Stepping 10, GenuineIntel\nCPU cores   : 12\nArchitecture: 64bit\n\ngeemap: 0.13.4\nee    : 0.2\nsys   : 3.9.12 | packaged by conda-forge | (main, Mar 24 2022, 23:17:03) [MSC v.1929 64 bit (AMD64)]\ngeedim: 1.2.0\ncsv   : 1.0\n\n</pre> In\u00a0[6]: Copied! <pre>#import datasets from GEE\n# A multiband image\nnasadem = ee.Image(\"NASA/NASADEM_HGT/001\")\n\n# Get Kenya administrative boundary using a point in Kenya\npoi = ee.Geometry.Point([37.857884,-0.002197])\nkenya = getCountry(poi)\n\n# Set download directory\ndd = r'D:\\Scratch'\n</pre> #import datasets from GEE # A multiband image nasadem = ee.Image(\"NASA/NASADEM_HGT/001\")  # Get Kenya administrative boundary using a point in Kenya poi = ee.Geometry.Point([37.857884,-0.002197]) kenya = getCountry(poi)  # Set download directory dd = r'D:\\Scratch' In\u00a0[9]: Copied! <pre>AOIExtractor = extractor(nasadem, aoi= kenya, dd=dd, scale =100)\nAOIExtractor.extractAoi()\n</pre> AOIExtractor = extractor(nasadem, aoi= kenya, dd=dd, scale =100) AOIExtractor.extractAoi() <pre>Consider adjusting `region`, `scale` and/or `dtype` to reduce the X.tif download size (raw: 1.16 GB).\n</pre> <pre>X.tif: |                                                              | 0.00/1.16G (raw) [  0.0%] in 00:00 (et\u2026</pre> <pre>There is no STAC entry for: None\n</pre> In\u00a0[7]: Copied! <pre># Extract data at random points\ntarget = ee.FeatureCollection.randomPoints(kenya, 10000, 123, 5)\n# Initialise Extractor\nrandomPointExtractor = extractor(nasadem, target = target, aoi= kenya, dd=dd, scale =100)\nrandomPointExtractor.extractPoints(batchSize= 10000)\n</pre> # Extract data at random points target = ee.FeatureCollection.randomPoints(kenya, 10000, 123, 5) # Initialise Extractor randomPointExtractor = extractor(nasadem, target = target, aoi= kenya, dd=dd, scale =100) randomPointExtractor.extractPoints(batchSize= 10000) <pre>Extracting data for task 1 with 10000 point(s)\n</pre>"},{"location":"notebooks/1%20Extract_image_data_at_an_AOI/#extract-nasadem-for-aoi-kenya","title":"Extract NASADEM for AOI (Kenya)\u00b6","text":""},{"location":"notebooks/1%20Extract_image_data_at_an_AOI/#extract-data-at-randomly-generated-points-within-an-aoi-kenya","title":"Extract data at randomly generated points within an AOI (Kenya)\u00b6","text":""},{"location":"notebooks/2_Extract%20NICFI%20Planet%20data%20at%20points%20%28GEDI%29/","title":"2 Extract NICFI Planet data at points (GEDI)","text":"In\u00a0[1]: Copied! <pre># import earth engine and intialise high volume end-point\nimport ee\n# ee.Authenticate() # you may need to authenticate\nee.Initialize(opt_url='https://earthengine-highvolume.googleapis.com')\n</pre> # import earth engine and intialise high volume end-point import ee # ee.Authenticate() # you may need to authenticate ee.Initialize(opt_url='https://earthengine-highvolume.googleapis.com') In\u00a0[2]: Copied! <pre>import os\n\nimport csv\nimport geedim\nimport geemap\n\nfrom geeml.utils import eeprint, getCountry, createGrid\nfrom geeml.extract import extractor\n</pre> import os  import csv import geedim import geemap  from geeml.utils import eeprint, getCountry, createGrid from geeml.extract import extractor In\u00a0[3]: Copied! <pre>%load_ext watermark\n%watermark\n%watermark --iversions\n</pre> %load_ext watermark %watermark %watermark --iversions <pre>Last updated: 2022-06-29T16:30:55.194517+02:00\n\nPython implementation: CPython\nPython version       : 3.9.12\nIPython version      : 8.4.0\n\nCompiler    : MSC v.1929 64 bit (AMD64)\nOS          : Windows\nRelease     : 10\nMachine     : AMD64\nProcessor   : Intel64 Family 6 Model 158 Stepping 10, GenuineIntel\nCPU cores   : 12\nArchitecture: 64bit\n\nee    : 0.2\ngeemap: 0.13.4\ngeedim: 1.2.0\ncsv   : 1.0\n\n</pre> <p>Step 1: Import datasets</p> <p>Step 2: Prepare data (filter, reduce)</p> <p>Step 3: Extract data</p> <p>Step 1: Import datasets</p> In\u00a0[4]: Copied! <pre># Import data\nGEDI = ee.ImageCollection(\"LARSE/GEDI/GEDI02_A_002_MONTHLY\")\nplanet = ee.ImageCollection(\"projects/planet-nicfi/assets/basemaps/africa\")\nlandcover = ee.ImageCollection(\"ESA/WorldCover/v100\")\n\n# A point in Kenya\npoi = ee.Geometry.Point([37.857884,-0.002197])\naoi = getCountry(poi)#kenya\n</pre> # Import data GEDI = ee.ImageCollection(\"LARSE/GEDI/GEDI02_A_002_MONTHLY\") planet = ee.ImageCollection(\"projects/planet-nicfi/assets/basemaps/africa\") landcover = ee.ImageCollection(\"ESA/WorldCover/v100\")  # A point in Kenya poi = ee.Geometry.Point([37.857884,-0.002197]) aoi = getCountry(poi)#kenya <p>Step 2: Prepare data</p> In\u00a0[5]: Copied! <pre># Mask to remove buildings, snow/ice/ and open water\nlcmask = landcover.filterBounds(aoi).mosaic().eq([50, 70, 80]).reduce(ee.Reducer.max()).eq(0)\n\n# Filter GEDI data (remove low quality data)\ndef qualityMask(img):\n    return img.updateMask(img.select('quality_flag').eq(1))\\\n          .updateMask(img.select('degrade_flag').eq(0))\\\n          .updateMask(lcmask)\n\n# Filter data (to aoi and apply qualityMask and select rh98 band)\ndataset = GEDI.filterBounds(aoi).map(qualityMask)\\\n                .select(['rh98']);\n\n# Set projection and scale\nprojection = dataset.first().projection()\nscale = projection.nominalScale()\n\nmosaic = dataset.mosaic().setDefaultProjection(**{'crs':projection, 'scale':5}).clip(aoi);\n\n# Planet data- get percentiles across all monthly composite planet data\nmonthlyPlanet = planet.filterBounds(aoi).filter(ee.Filter.eq('cadence','monthly'))\\\n.reduce(ee.Reducer.percentile([5,25,50,75,95])).clip(aoi)\n</pre> # Mask to remove buildings, snow/ice/ and open water lcmask = landcover.filterBounds(aoi).mosaic().eq([50, 70, 80]).reduce(ee.Reducer.max()).eq(0)  # Filter GEDI data (remove low quality data) def qualityMask(img):     return img.updateMask(img.select('quality_flag').eq(1))\\           .updateMask(img.select('degrade_flag').eq(0))\\           .updateMask(lcmask)  # Filter data (to aoi and apply qualityMask and select rh98 band) dataset = GEDI.filterBounds(aoi).map(qualityMask)\\                 .select(['rh98']);  # Set projection and scale projection = dataset.first().projection() scale = projection.nominalScale()  mosaic = dataset.mosaic().setDefaultProjection(**{'crs':projection, 'scale':5}).clip(aoi);  # Planet data- get percentiles across all monthly composite planet data monthlyPlanet = planet.filterBounds(aoi).filter(ee.Filter.eq('cadence','monthly'))\\ .reduce(ee.Reducer.percentile([5,25,50,75,95])).clip(aoi) In\u00a0[\u00a0]: Copied! <pre># Download directory\ndd = r'D:\\Scratch'\n\n# Initialise extractor\ngedi = extractor(covariates = monthlyPlanet, target = mosaic, aoi = aoi, scale = 5, dd=dd, spcvGridSize= 30000)\n\n# Extract data in batches of 30 000 points\ngedi.extractPoints(gridSize = 50000, batchSize = 30000, filename = 'height.csv')\n</pre> # Download directory dd = r'D:\\Scratch'  # Initialise extractor gedi = extractor(covariates = monthlyPlanet, target = mosaic, aoi = aoi, scale = 5, dd=dd, spcvGridSize= 30000)  # Extract data in batches of 30 000 points gedi.extractPoints(gridSize = 50000, batchSize = 30000, filename = 'height.csv') In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/2_Extract%20NICFI%20Planet%20data%20at%20points%20%28GEDI%29/#extract-data-for-sparse-imagery-gedi-and-nicfi-planet-at-intersecting-points","title":"Extract data for Sparse imagery (GEDI) and NICFI planet at intersecting points\u00b6","text":""},{"location":"notebooks/2_Extract%20NICFI%20Planet%20data%20at%20points%20%28GEDI%29/#we-convert-the-gedi-image-to-points-and-extract-the-planet-data-at-these-corresponding-points-we-use-the-esa-worldcover-data-to-remove-water-ice-and-urban-areas","title":"We convert the GEDI image to points and extract the Planet data at these corresponding points. We use the ESA Worldcover data to remove water, ice and urban areas.\u00b6","text":""},{"location":"notebooks/2_Extract%20NICFI%20Planet%20data%20at%20points%20%28GEDI%29/#spcvgridsize-defines-a-grid-in-this-case-a-30-km-by-30-km-grid-this-is-useful-for-performing-spatial-cross-validation","title":"spcvGridSize defines a grid, in this case a 30 km by 30 km grid. This is useful for performing Spatial Cross validation\u00b6","text":""}]}